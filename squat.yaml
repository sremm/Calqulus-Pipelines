# A pipeline is written in YAML and instructs the Calqulus processing engine what to calculate.
# In order to process this pipeline, skeleton must be solved in QTM first.

# A pipeline consists of any number of base nodes defined on the root level. 

# Output nodes define an end result that is exported to the global scope and exported in the resulting JSON file.
# Output node can be 'event' or 'parameter'
# The main difference between the parameter and event is what type of data is stored. 
# A parameter node will store series and scalar data, whereas an event node will store event data.

# Space node defines custom coordinate systems. It is useful when orientation of subject changes
# with regards to the global coordinate system, e.g. walking through lab in both directions.

# Order of nodes is not important. They can be placed anywhere in YAML file.

############
## SPACES ##
############

# Create a space named VirtualLab, that is defined by the orientation of Hips (Pelvis) segment.
- space: VirtualLab
  alignWithSegment:
    segment: Hips

############
## EVENTS ##
############

# An event node defines steps used to calculate an event.
# An event is a label that describes one or more points in time.
# Events can be used in both event and parameter calculations, as well as for normalization by the reporting framework. 
# The resulting event is exported to the global scope and exported in the resulting JSON file.

# Create event at left knee maximum flexion
- event: BOF
  where:
    name: '!Static*'
  steps:
    - import: [0]
  
- event: EOF
  where:
    name: '!Static*'
  steps:
    - import: [$length]

############
## SERIES ##
############

# Calculating joint angles and positions

# --- Pelvis ---

- parameter: Pelvic Angles
  where:
    name: '!Static*'
  steps:
    - angle: Hips # angle is calculated relative to axes of global coordinate system, if only single input exists
      space: VirtualLab # calculate angle relative to virtual lab
    - multiply: [$prev, [-1, 1, 1]] # invert first component of output
  
- parameter: Pelvis_Position
  where:
    name: '!Static*'
  steps:
    - segment: Hips 
      space: VirtualLab

- parameter: Pelvis_Position_Norm_To_Start
  where:
    name: '!Static*'
  steps:
    - import: Pelvis_Position
    - subtract: [Pelvis_Position, Pelvis_Position@StartOfEccentric]
    - convert: $prev
      from: mm
      to: m

- parameter: Pelvis_Velocity
  where:
    name: '!Static*'
  steps:
    # - convert: Pelvis_Position
    #   from: mm
    #   to: m
    - velocity: Pelvis_Position
    - lowpass: $prev
      extrapolate: 100
      order: 6
      cutoff: 5
    

# --- Hips ---

- parameter: Left Hip Angles
  where:
    name: '!Static*'
  set: left
  steps:
    - angle: [Hips, LeftUpLeg] # when two segments are specified, joint angle between the segments is calculated
    - multiply: [$prev, [1, -1, -1]]

- parameter: Right Hip Angles
  where:
    name: '!Static*'
  set: right
  steps:
    - angle: [Hips, RightUpLeg]

- parameter: Left Hip Angles_Vel
  where: 
    name: '!Static*'
  set: left
  steps:
    - angularVelocity: [Hips, LeftUpLeg, Hips, LeftUpLeg]
    - multiply: [$prev, [-1, 1, 1]]

- parameter: Right Hip Angles_Vel
  where: 
    name: '!Static*'
  set: right
  steps:
    - angularVelocity: [Hips, RightUpLeg, Hips, RightUpLeg]
    - multiply: [$prev, [-1, 1, 1]]

# --- Knee ---

- parameter: Left Knee Angles
  where:
    name: '!Static*'
  set: left
  steps:
    - angle: [LeftUpLeg, LeftLeg]
      rotationOrder: XYZ
    - multiply: [$prev, [-1, -1, -1]]

- parameter: Right Knee Angles
  where:
    name: '!Static*'
  set: right
  steps:
    - angle: [RightUpLeg, RightLeg]
    - multiply: [$prev, [-1, 1, 1]]

- parameter: Left Knee Angles_Vel
  where: 
    name: '!Static*'
  set: left
  steps:
    - angularVelocity: [LeftUpLeg, LeftLeg, LeftUpLeg, LeftLeg]
    - multiply: [$prev, [1, 1, 1]]

- parameter: Right Knee Angles_Vel
  where: 
    name: '!Static*'
  set: right
  steps:
    - angularVelocity: [RightUpLeg, RightLeg, RightUpLeg, RightLeg]
    - multiply: [$prev, [1, 1, 1]]

- parameter: Left Knee_Position
  where:
    name: '!Static*'
  set: left
  steps:
    - segment: LeftLeg 
      space: VirtualLab
    - subtract: [$prev, Pelvis_Position@StartOfEccentric]
    - multiply: [$prev, [-1, 1, 1]]
    - convert: $prev
      from: mm
      to: m

- parameter: Right Knee_Position
  where:
    name: '!Static*'
  set: right
  steps:
    - segment: RightLeg 
      space: VirtualLab
    - subtract: [$prev, Pelvis_Position@StartOfEccentric]
    - multiply: [$prev, [-1, 1, 1]]
    - convert: $prev
      from: mm
      to: m

# --- Ankle ---

- parameter: Left Ankle Angles
  set: left
  steps:
    - angle: [LeftLeg, LeftFoot]
    - multiply: [$prev, [1, -1, 1]]

- parameter: Right Ankle Angles
  where:
    name: '!Static*'
  set: right
  steps:
    - angle: [RightLeg, RightFoot]
    - multiply: [$prev, [1, 1, -1]]

- parameter: Left Ankle Angles_Vel
  where: 
    name: '!Static*'
  set: left
  steps:
    - angularVelocity: [LeftLeg, LeftFoot, LeftLeg, LeftFoot]
    - multiply: [$prev, [-1, 1, 1]]

- parameter: Right Ankle Angles_Vel
  where: 
    name: '!Static*'
  set: right
  steps:
    - angularVelocity: [RightLeg, RightFoot, RightLeg, RightFoot]
    - multiply: [$prev, [-1, 1, 1]]

# --- Foot ---
- parameter: Left Toe Base_Position
  set: left
  where:
    name: '!Static*'
  steps:
    - segment: LeftToeBase
      space: VirtualLab

- parameter: Right Toe Base_Position
  set: right
  where:
    name: '!Static*'
  steps:
    - segment: RightToeBase
      space: VirtualLab

- parameter: Left Toe Base_Velocity
  set: left
  where:
    name: '!Static*'
  steps:
    - velocity: Left Toe Base_Position
  
- parameter: Right Toe Base_Velocity
  set: right
  where:
    name: '!Static*'
  steps:
    - velocity: Right Toe Base_Position
      

# --- Thorax ---

- parameter: Thorax Angles
  where:
    name: '!Static*'
  steps:
    - angle: [Hips, Spine2]
    - multiply: [$prev, [-1, -1, 1]]

- parameter: Thorax Angles_Lab
  where:
    name: '!Static*'
  steps:
    - angle: Spine2
      space: VirtualLab # calculate angle relative to virtual lab
    - multiply: [$prev, [-1, 1, 1]] # invert first component of output

# --- Shoulder ---

- parameter: Left Shoulder Angles
  where:
    name: '!Static*'
  set: left
  steps:
    - angle: [Spine2, LeftArm]
    - multiply: [$prev, [1, -1, -1]]

- parameter: Right Shoulder Angles
  where:
    name: '!Static*'
  set: right
  steps:
    - angle: [Spine2, RightArm]
    - multiply: [$prev, [1, 1, 1]]

# --- Elbow ---

- parameter: Left Elbow Angles
  where:
    name: '!Static*'
  set: left
  steps:
    - angle: [LeftArm, LeftForeArm]
    - multiply: [$prev, [1, 1, -1]]

- parameter: Right Elbow Angles
  where:
    name: '!Static*'
  set: right
  steps:
    - angle: [RightArm, RightForeArm]

# --- Wrist ---

- parameter: Left Wrist Angles
  where:
    name: '!Static*'
  set: left
  steps:
    - angle: [LeftForeArm, LeftHand]
    - multiply: [$prev, [1, -1, 1]]

- parameter: Right Wrist Angles
  where:
    name: '!Static*'
  set: right
  steps:
    - angle: [RightForeArm, RightHand]
    - multiply: [$prev, [1, 1, -1]]

# --- Head ---

- parameter: Head Angles
  where:
    name: '!Static*'
  steps:
    - angle: [Head, Spine2]


############
## EVENTS ##
############


- event: PelvisVelDownEvent03
  where: 
    name: '!Static*'
  steps:
   - import: Pelvis_Velocity.z => pelvis_vel
   - threshold: Pelvis_Velocity.z
     value: -0.3
     direction: down

- event: PelvisVelDownEvent
  where: 
    name: '!Static*'
  steps:
   - import: Pelvis_Velocity.z => pelvis_vel
   - threshold: Pelvis_Velocity.z
     value: -0.1
     direction: down
   - refineEvent: $prev
     sequence: [$prev, PelvisVelDownEvent03]

- event: PelvisVelUpEvent
  where: 
    name: '!Static*'
  steps:
   - threshold: Pelvis_Velocity.z
     direction: up
     value: 0


- parameter: filtered_inverted_pelvis_z
  steps:
    - negate: Pelvis_Position.z => pelvis_pos_inv
    - min: pelvis_pos_inv => min_pos
    - subtract: [pelvis_pos_inv, min_pos]
    - lowpass: $prev
      extrapolate: 100
      order: 6
      cutoff: 5
    - convert: $prev
      from: mm
      to: m

- event: PelvisPosValleyEvent
  where: 
    name: '!Static*'
  steps:
    - peakFinder: filtered_inverted_pelvis_z
      width: 5
      distance: 100
      height: 0.1
    # - min:

- event: StartOfEccentric
  where: 
    name: '!Static*'
  steps:
   - refineEvent: PelvisVelDownEvent
     sequence: [PelvisVelDownEvent, PelvisVelUpEvent]
     cyclic: false
   - refineEvent: $prev
     sequence: [$prev, PelvisVelUpEvent]
     cyclic: false
     


- event: StartOfConcentric
  where: 
    name: '!Static*'
  steps:
   - refineEvent: PelvisPosValleyEvent
     sequence: [StartOfEccentric, PelvisPosValleyEvent]
     cyclic: false

- event: EndOfConcentric
  where: 
    name: '!Static*'
  steps:
   - refineEvent: PelvisVelUpEvent
     sequence: [StartOfEccentric, PelvisVelUpEvent]
     cyclic: false


#############
## Metrics ##
#############

- parameter: depth_of_movement
  where: 
    name: '!Static*'
  steps:
   - subtract: [Pelvis_Position.z@StartOfEccentric, Pelvis_Position.z@StartOfConcentric]
   - convert: $prev
     from: mm
     to: m

# Find global maximum/minimum/range

# Pelvis
- parameter: Pelvis Tilt max
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Pelvic Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Pelvis Tilt min
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Pelvic Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Pelvis Tilt range
  where:
    name: '!Static*'
  set: left
  steps:
    - subtract: [Pelvis Tilt max, Pelvis Tilt min]

# Hips
- parameter: Left Hip Flex max
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Hip Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Left Hip Flex min
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Hip Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Left Hip Flex range
  where:
    name: '!Static*'
  set: left
  steps:
    - subtract: [Left Hip Flex max, Left Hip Flex min]

- parameter: Right Hip Flex max
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Hip Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Right Hip Flex min
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Hip Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Right Hip Flex range
  where:
    name: '!Static*'
  set: right
  steps:
    - subtract: [Right Hip Flex max, Right Hip Flex min]

# Knees
- parameter: Left Knee Flex max
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Knee Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Left Knee Flex min
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Knee Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Left Knee Flex range
  where:
    name: '!Static*'
  set: left
  steps:
    - subtract: [Left Knee Flex max, Left Knee Flex min]

- parameter: Right Knee Flex max
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Knee Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Right Knee Flex min
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Knee Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Right Knee Flex range
  where:
    name: '!Static*'
  set: right
  steps:
    - subtract: [Right Knee Flex max, Right Knee Flex min]

# Ankles
- parameter: Left Ankle Flex max
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Ankle Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Left Ankle Flex min
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Ankle Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Left Ankle Flex range
  where:
    name: '!Static*'
  set: left
  steps:
    - subtract: [Left Ankle Flex max, Left Ankle Flex min]

- parameter: Right Ankle Flex max
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Ankle Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Right Ankle Flex min
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Ankle Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Right Ankle Flex range
  where:
    name: '!Static*'
  set: right
  steps:
    - subtract: [Right Ankle Flex max, Right Ankle Flex min]

# Shoulders
- parameter: Left Shoulder Flex max
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Shoulder Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Left Shoulder Flex min
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Shoulder Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Left Shoulder Flex range
  where:
    name: '!Static*'
  set: left
  steps:
    - subtract: [Left Shoulder Flex max, Left Shoulder Flex min]

- parameter: Right Shoulder Flex max
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Shoulder Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Right Shoulder Flex min
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Shoulder Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Right Shoulder Flex range
  where:
    name: '!Static*'
  set: right
  steps:
    - subtract: [Right Shoulder Flex max, Right Shoulder Flex min]

# Elbows
- parameter: Left Elbow Flex max
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Elbow Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Left Elbow Flex min
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Elbow Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Left Elbow Flex range
  where:
    name: '!Static*'
  set: left
  steps:
    - subtract: [Left Elbow Flex max, Left Elbow Flex min]

- parameter: Right Elbow Flex max
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Elbow Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Right Elbow Flex min
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Elbow Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Right Elbow Flex range
  where:
    name: '!Static*'
  set: right
  steps:
    - subtract: [Right Elbow Flex max, Right Elbow Flex min]

# Wrists
- parameter: Left Wrist Flex max
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Wrist Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Left Wrist Flex min
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Left Wrist Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Left Wrist Flex range
  where:
    name: '!Static*'
  set: left
  steps:
    - subtract: [Left Wrist Flex max, Left Wrist Flex min]

- parameter: Right Wrist Flex max
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Wrist Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Right Wrist Flex min
  where:
    name: '!Static*'
  set: right
  steps:
    - import: Right Wrist Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Right Wrist Flex range
  where:
    name: '!Static*'
  set: right
  steps:
    - subtract: [Right Wrist Flex max, Right Wrist Flex min]

# Thorax
- parameter: Thorax Forward Tilt max
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Thorax Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Thorax Forward Tilt min
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Thorax Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Thorax Forward Tilt range
  where:
    name: '!Static*'
  set: left
  steps:
    - subtract: [Thorax Forward Tilt max, Thorax Forward Tilt min]

# Head
- parameter: Head Forward Tilt max
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Head Angles
    - eventMask: [$prev, BOF, EOF]
    - max: $prev.x

- parameter: Head Forward Tilt min
  where:
    name: '!Static*'
  set: left
  steps:
    - import: Head Angles
    - eventMask: [$prev, BOF, EOF]
    - min: $prev.x

- parameter: Head Forward Tilt range
  where:
    name: '!Static*'
  set: left
  steps:
    - subtract: [Head Forward Tilt max, Head Forward Tilt min]
